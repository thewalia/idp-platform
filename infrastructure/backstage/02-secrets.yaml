---
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/part-of: idp-platform
spec:
  provider:
    vault:
      server: "http://vault.vault.svc.cluster.local:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "backstage-role"
          serviceAccountRef:
            name: "backstage"
---
# GitHub PAT Secret
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: backstage-github-secrets
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/part-of: idp-platform
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backstage-github-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        github-token: "{{ .githubToken }}"
        github-client-id: "{{ .githubClientId }}"
        github-client-secret: "{{ .githubClientSecret }}"
  data:
    - secretKey: githubToken
      remoteRef:
        key: backstage/github
        property: token
    - secretKey: githubClientId
      remoteRef:
        key: backstage/github
        property: client-id
    - secretKey: githubClientSecret
      remoteRef:
        key: backstage/github
        property: client-secret
---
# Database Credentials Secret
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: backstage-db-secrets
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/part-of: idp-platform
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backstage-db-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        postgres-password: "{{ .postgresPassword }}"
        postgres-user: "{{ .postgresUser }}"
  data:
    - secretKey: postgresPassword
      remoteRef:
        key: backstage/database
        property: password
    - secretKey: postgresUser
      remoteRef:
        key: backstage/database
        property: username
---
# ArgoCD Credentials Secret
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: backstage-argocd-secrets
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/part-of: idp-platform
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backstage-argocd-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        admin-password: "{{ .adminPassword }}"
        auth-token: "{{ .authToken }}"
  data:
    - secretKey: adminPassword
      remoteRef:
        key: backstage/argocd
        property: admin-password
    - secretKey: authToken
      remoteRef:
        key: backstage/argocd
        property: auth-token
---
# Auth Session Secret
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: backstage-auth-secrets
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/part-of: idp-platform
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  refreshInterval: 30s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: backstage-auth-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        session-secret: "{{ .sessionSecret }}"
  data:
    - secretKey: sessionSecret
      remoteRef:
        key: backstage/auth
        property: session-secret
