---
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: backstage
    app.kubernetes.io/part-of: idp-platform
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 7007
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: backstage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
  labels:
    app.kubernetes.io/name: backstage
    app.kubernetes.io/instance: backstage
    app.kubernetes.io/part-of: idp-platform
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: backstage
      app.kubernetes.io/instance: backstage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backstage
        app.kubernetes.io/instance: backstage
        app.kubernetes.io/part-of: idp-platform
      annotations:
        # Force restart on config change
        checksum/config: "{{ include (print $.Template.BasePath \"/03-configmap.yaml\") . | sha256sum }}"
    spec:
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: backstage
      automountServiceAccountToken: false
      initContainers:
        # Copy app files with correct ownership using fsGroup
        - name: copy-app-files
          image: ghcr.io/backstage/backstage:latest
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -c
            - |
              echo "Copying Backstage app files to writable volume..."
              # Copy the entire /app directory contents to the shared volume
              # The fsGroup: 1001 at pod level ensures proper ownership
              cp -rp /app/* /app-writeable/ 2>/dev/null || true
              cp -rp /app/.* /app-writeable/ 2>/dev/null || true
              
              # Verify critical files exist
              if [ -d "/app-writeable/packages/backend" ]; then
                echo "✅ Backend packages copied successfully"
              else
                echo "❌ Backend packages not found!"
                exit 1
              fi
              
              if [ -f "/app-writeable/package.json" ]; then
                echo "✅ Package.json found"
              else
                echo "❌ Package.json not found!"
                exit 1  
              fi
              
              echo "File copy completed successfully"
              ls -la /app-writeable/
          volumeMounts:
            - name: app-data
              mountPath: /app-writeable
        # Wait for PostgreSQL to be ready
        - name: wait-for-postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - sh
            - -c
            - |
              until pg_isready -h backstage-postgresql -p 5432 -U "$POSTGRES_USER"; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: backstage-db-secrets
                  key: postgres-user
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      containers:
        - name: backstage
          image: ghcr.io/backstage/backstage:latest
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: http
              containerPort: 7007
              protocol: TCP
          env:
            # Database configuration
            - name: POSTGRES_HOST
              value: "backstage-postgresql"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: backstage-db-secrets
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-db-secrets
                  key: postgres-password
            # GitHub integration
            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: backstage-github-secrets
                  key: github-token
            # ArgoCD integration
            - name: ARGOCD_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: backstage-argocd-secrets
                  key: admin-password
            - name: ARGOCD_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: backstage-argocd-secrets
                  key: auth-token
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            # Shared app data volume (now with correct permissions)
            - name: app-data
              mountPath: /app
            # Cache volume (hostPath)
            - name: backstage-cache
              mountPath: /opt/app-root/src/.cache
            # App configuration (override the default config)
            - name: app-config
              mountPath: /app/app-config.production.yaml
              subPath: app-config.production.yaml
              readOnly: true
            # Temp directory
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        # Shared volume for app data with correct permissions
        - name: app-data
          emptyDir: {}
        - name: backstage-cache
          hostPath:
            path: /var/lib/backstage-cache
            type: DirectoryOrCreate
        # App configuration from ConfigMap
        - name: app-config
          configMap:
            name: backstage-app-config
        # Temporary directory
        - name: tmp
          emptyDir: {}
